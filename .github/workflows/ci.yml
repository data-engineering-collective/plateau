name: CI


on:
  pull_request:
  push:
    branches:
      - 'main'
    tags:
      - '*'
  schedule:
    # daily (`@daily` not supported, see
    # https://docs.github.com/en/actions/reference/events-that-trigger-workflows#scheduled-events )
    #
    # Runs on default/base branch (see
    # https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions#onschedule )
    - cron: '0 0 * * *'


jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        numfocus_nightly: [false]
        os: ["ubuntu-latest"]
        pyarrow: ["3.0.0", "4.0.1", "nightly"]
        python: ["3.8"]
        include:
          - numfocus_nightly: true
            os: "ubuntu-latest"
            pyarrow: "4.0.1"
            python: "3.8"
          - numfocus_nightly: false
            os: "macos-latest"
            pyarrow: "4.0.1"
            python: "3.8"
    continue-on-error: ${{ matrix.numfocus_nightly || matrix.pyarrow == 'nightly' }}

    runs-on: ${{ matrix.os }}

    defaults:
      run:
        # see https://github.com/conda-incubator/setup-miniconda/#important
        shell: bash -l {0}

    env:
      IS_MASTER_BUILD: ${{ !matrix.numfocus_nightly && matrix.os == 'ubuntu-latest' && matrix.pyarrow == '4.0.1' && matrix.python == '3.8' }}
      IS_TAG: ${{ github.event_name == 'push' && startsWith(github.event.ref, 'refs/tags')}}

    steps:
      # CI setup
      - name: Is Master Build?
        run: echo $IS_MASTER_BUILD
      - name: Checkout
        uses: actions/checkout@v3

      - name: Cache conda
        uses: actions/cache@v3.0.3
        with:
          path: ~/conda_pkgs_dir
          key: ${{ runner.os }}-${{ matrix.python }}-${{ matrix.pyarrow }}-${{ hashFiles('conda-requirements.txt', 'conda-test-requirements.txt')}}

      - name: Conda Bootstrap
        uses: conda-incubator/setup-miniconda@v2
        with:
          auto-update-conda: true
          channel-priority: strict
          channels: conda-forge
          miniforge-variant: Mambaforge
          miniforge-version: 4.11.0-0
          use-mamba: true
          python-version: ${{ matrix.python }}
      - name: Conda Config
        run: |
          conda config --set always_yes yes
          conda config --set changeps1 no

      # Installation into the `test` environment
      - name: Conda Install Pyarrow (non-nightly)
        run: mamba install -c conda-forge pyarrow==${{ matrix.pyarrow }}
        if: matrix.pyarrow != 'nightly'
      - name: Conda Install Pyarrow (nightly)
        # Install both arrow-cpp and pyarrow to make sure that we have the
        # latest nightly of both packages. It is sadly not guaranteed that the
        # nightlies and the latest release would otherwise work together.
        run: mamba install -c arrow-nightlies -c conda-forge arrow-cpp pyarrow
        if: matrix.pyarrow == 'nightly'
      - name: Conda Install conda-requirements.txt
        # run this AFTER pyarrow, since this is less restrictive (so conda doesn't spend too much time downgrading)
        run: mamba install --file=conda-requirements.txt
      - name: Pip Install plateau
        run: pip install --no-deps .
      - name: Test import
        run: |
          python -c "import plateau"
          python -c "import plateau.api"
          python -c "import plateau.api.dataset"
          python -c "import plateau.api.serialization"
          python -c "import plateau.core"
          python -c "import plateau.io"
          python -c "import plateau.io_components"
          python -c "import plateau.serialization"
          python -c "import plateau.utils"
      - name: Conda install test requirements
        run: mamba install
              -c conda-forge
              --file=conda-test-requirements.txt
              --freeze-installed
      - name: Pip Instal NumFOCUS nightly
        # NumFOCUS nightly wheels, contains numpy and pandas
        run: pip install --pre --upgrade --timeout=60 --extra-index-url https://pypi.anaconda.org/scipy-wheels-nightly/simple pandas numpy
        if: matrix.numfocus_nightly
      - name: Conda Export
        run: conda list --export

      # Tests
      - name: Pytest
        run: pytest -n auto --dist loadscope --cov --cov-report xml

      - name: Running benchmarks
        run: |
          asv --config ./asv_bench/asv.conf.json machine --machine github --os unknown --arch unknown --cpu unknown --ram unknown
          asv --config ./asv_bench/asv.conf.json dev | sed "/failed$/ s/^/##[error]/" | tee benchmarks.log
          if grep "failed" benchmarks.log > /dev/null ; then
              exit 1
          fi
        if: env.IS_MASTER_BUILD == 'true'

      # Builds
      - name: Build Wheel
        run: python setup.py sdist bdist_wheel

      - name: Codecov
        uses: codecov/codecov-action@v3.1.0
        with:
          # NOTE: `token` is not required, because the plateau repo is public
          file: ./coverage.xml
          name: pytest-numfocus_nightly_${{ matrix.numfocus_nightly }}-os_${{ matrix.os }}-pyarrow_${{ matrix.pyarrow }}-python_${{ matrix.python }}

      # Release
      - name: Publish to PyPI
        if: env.IS_MASTER_BUILD == 'true' && env.IS_TAG == 'true'
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_PASSWORD }}
      - name: Create Release Notes
        if: env.IS_MASTER_BUILD == 'true' && env.IS_TAG == 'true'
        run: |
            awk 'BEGIN{found=0} {if (match($0, "==============")) {if (found == 1) exit; found=1}; if (found == 1) {print last}; last=$0}' CHANGES.rst > release_notes.rst
            pandoc --from=rst --to=markdown -o release_notes.md release_notes.rst
      - name: Create GitHub Release
        if: env.IS_MASTER_BUILD == 'true' && env.IS_TAG == 'true'
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: plateau ${{ github.ref }}
          body_path: release_notes.md
          draft: false
          prerelease: false
